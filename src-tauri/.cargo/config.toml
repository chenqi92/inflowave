# Cargo 配置文件 - 多架构构建优化
# 此文件包含针对不同平台和架构的构建优化配置

[build]
# 默认目标（可以通过命令行覆盖）
# target = "x86_64-pc-windows-msvc"

# 并行构建作业数（根据 CPU 核心数调整）
jobs = 4

# 增量编译（加速重复构建）
incremental = true

[target.x86_64-pc-windows-msvc]
# Windows x64 优化
rustflags = [
    "-C", "target-cpu=native",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]

[target.i686-pc-windows-msvc]
# Windows x86 优化
rustflags = [
    "-C", "target-cpu=pentium4",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]

[target.aarch64-pc-windows-msvc]
# Windows ARM64 优化
rustflags = [
    "-C", "target-cpu=generic",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]

[target.x86_64-apple-darwin]
# macOS Intel 优化
rustflags = [
    "-C", "target-cpu=native",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]

[target.aarch64-apple-darwin]
# macOS Apple Silicon 优化
rustflags = [
    "-C", "target-cpu=apple-a14",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]

[target.x86_64-unknown-linux-gnu]
# Linux x64 优化
rustflags = [
    "-C", "target-cpu=native",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]

[target.aarch64-unknown-linux-gnu]
# Linux ARM64 优化
rustflags = [
    "-C", "target-cpu=generic",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]
# 交叉编译链接器
linker = "aarch64-linux-gnu-gcc"

[target.i686-unknown-linux-gnu]
# Linux x86 优化
rustflags = [
    "-C", "target-cpu=pentium4",
    "-C", "opt-level=3",
    "-C", "codegen-units=1",
    "-C", "panic=abort"
]

# 注册表配置（使用国内镜像加速）
[source.crates-io]
replace-with = 'ustc'

[source.ustc]
registry = "https://mirrors.ustc.edu.cn/crates.io-index"

# 备用镜像
[source.sjtu]
registry = "https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/"

[source.tuna]
registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"

# 环境变量配置
[env]
# 启用更好的错误信息
RUST_BACKTRACE = "1"

# 优化编译缓存
CARGO_INCREMENTAL = "1"

# 设置目标目录（可选）
# CARGO_TARGET_DIR = "target"

# 网络配置
[http]
# 超时设置（秒）
timeout = 30
# 用户代理
user-agent = "cargo"

# Git 配置
[net]
# Git 获取并行数
git-fetch-with-cli = true

# 构建优化配置
# 注意：profile 配置已移至 Cargo.toml 中，避免重复定义

# 特定依赖优化
[profile.dev.package."*"]
opt-level = 2

# 构建脚本优化
[profile.dev.build-override]
opt-level = 3

[profile.release.build-override]
opt-level = 3
