name: Auto Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag exists
        id: check
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag v$VERSION does not exist, will create release"
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi

  create-tag:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-release == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git "v$VERSION"

  build-and-release:
    needs: [check-version, create-tag]
    if: needs.check-version.outputs.should-release == 'true'
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-24.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        env:
          HUSKY: 0
        run: npm ci

      - name: Update Tauri config version
        shell: bash
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          if command -v jq >/dev/null 2>&1; then
            jq ".version = \"$VERSION\"" src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp
            mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
          else
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              powershell -Command "(Get-Content src-tauri/tauri.conf.json) -replace '\"version\": \".*\"', '\"version\": \"$VERSION\"' | Set-Content src-tauri/tauri.conf.json"
            else
              sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
              rm -f src-tauri/tauri.conf.json.bak
            fi
          fi

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ needs.check-version.outputs.version }}
          releaseName: 'InfluxDB GUI Manager v${{ needs.check-version.outputs.version }}'
          releaseBody: |
            ## 🚀 InfluxDB GUI Manager v${{ needs.check-version.outputs.version }}

            A modern, cross-platform GUI management tool for InfluxDB 1.x databases, providing comprehensive database management, query execution, and data visualization capabilities.

            ### 📦 Download & Installation

            Choose the appropriate installer for your operating system:

            - **Windows**: Download the .msi installer
            - **macOS**: Download the .dmg disk image (supports Intel & Apple Silicon)
            - **Linux**: Download the .deb or .AppImage package

            ### 🔧 Installation Instructions

            1. Download the installer for your platform
            2. Run the installer and follow the setup wizard
            3. Launch "InfluxDB GUI Manager" from your applications
            4. Configure your InfluxDB server connection to get started

            ### 💻 System Requirements
            
            - **Windows**: Windows 10 or later
            - **macOS**: macOS 10.13 or later
            - **Linux**: Linux distributions with GTK 3.0+ support
            
            ### 🌟 Key Features
            
            - 🔗 **Multi-Connection Management** - Support for multiple InfluxDB instances
            - 🗄️ **Database Operations** - Complete database CRUD operations
            - 📝 **Advanced Query Editor** - Monaco editor with syntax highlighting and auto-completion
            - 📊 **Data Visualization** - Multiple chart types with real-time data monitoring
            - 📤📥 **Data Import/Export** - Support for multiple data formats
            - ⚙️ **System Monitoring** - Performance metrics and health monitoring
            
            ### 📚 Documentation
            
            - [User Manual](https://github.com/your-username/influx-gui/blob/main/user-docs/README.md)
            - [Quick Start Guide](https://github.com/your-username/influx-gui/blob/main/user-docs/quick-start.md)
            - [Feature Overview](https://github.com/your-username/influx-gui/blob/main/user-docs/features/README.md)
            
            ---
            
            For issues and feedback, please visit [GitHub Issues](https://github.com/your-username/influx-gui/issues)
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.platform == 'macos-latest' && '--target universal-apple-darwin' || '' }}
