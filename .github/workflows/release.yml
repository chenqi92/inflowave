name: Auto Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag exists
        id: check
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag v$VERSION does not exist, will create release"
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi

  create-tag:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-release == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git "v$VERSION"

  build-and-release:
    needs: [check-version, create-tag]
    if: needs.check-version.outputs.should-release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            os: windows
          - platform: windows-latest
            target: i686-pc-windows-msvc
            arch: x86
            os: windows
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            os: windows

          # macOS builds
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
            os: macos
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            os: macos

          # Linux builds
          - platform: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            arch: x64
            os: linux
          - platform: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            arch: arm64
            os: linux
          - platform: ubuntu-24.04
            target: i686-unknown-linux-gnu
            arch: x86
            os: linux

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe -y
          sudo apt-get update

          # Install base dependencies
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            pkg-config \
            libayatana-appindicator3-dev

          # Install cross-compilation tools for different architectures
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "x86" ]; then
            sudo apt-get install -y gcc-multilib g++-multilib
            sudo apt-get install -y libgtk-3-dev:i386 || true
          fi

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.target }}

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        env:
          HUSKY: 0
        run: npm ci

      - name: Update Tauri config version
        shell: bash
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          if command -v jq >/dev/null 2>&1; then
            jq ".version = \"$VERSION\"" src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp
            mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
          else
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              powershell -Command "(Get-Content src-tauri/tauri.conf.json) -replace '\"version\": \".*\"', '\"version\": \"$VERSION\"' | Set-Content src-tauri/tauri.conf.json"
            else
              sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
              rm -f src-tauri/tauri.conf.json.bak
            fi
          fi

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v${{ needs.check-version.outputs.version }}
          releaseName: 'InfluxDB GUI Manager v${{ needs.check-version.outputs.version }}'
          releaseBody: |
            ## üöÄ InfluxDB GUI Manager v${{ needs.check-version.outputs.version }}

            A modern, cross-platform GUI management tool for InfluxDB 1.x databases, providing comprehensive database management, query execution, and data visualization capabilities.

            ### üì¶ Download & Installation

            Choose the appropriate installer for your operating system and architecture:

            #### Windows
            - **x64 (64-bit Intel/AMD)**: `InfloWave_${{ needs.check-version.outputs.version }}_x64_en-US.msi`
            - **x86 (32-bit)**: `InfloWave_${{ needs.check-version.outputs.version }}_x86_en-US.msi`
            - **ARM64**: `InfloWave_${{ needs.check-version.outputs.version }}_arm64_en-US.msi`

            #### macOS
            - **Intel (x64)**: `InfloWave_${{ needs.check-version.outputs.version }}_x64.dmg`
            - **Apple Silicon (ARM64)**: `InfloWave_${{ needs.check-version.outputs.version }}_aarch64.dmg`

            #### Linux
            - **x64 (64-bit)**: `inflowave_${{ needs.check-version.outputs.version }}_amd64.deb` or `inflowave_${{ needs.check-version.outputs.version }}_amd64.AppImage`
            - **ARM64**: `inflowave_${{ needs.check-version.outputs.version }}_arm64.deb` or `inflowave_${{ needs.check-version.outputs.version }}_aarch64.AppImage`
            - **x86 (32-bit)**: `inflowave_${{ needs.check-version.outputs.version }}_i386.deb`

            ### üîß Installation Instructions

            1. Download the installer for your platform
            2. Run the installer and follow the setup wizard
            3. Launch "InfluxDB GUI Manager" from your applications
            4. Configure your InfluxDB server connection to get started

            ### üíª System Requirements
            
            - **Windows**: Windows 10 or later
            - **macOS**: macOS 10.13 or later
            - **Linux**: Linux distributions with GTK 3.0+ support
            
            ### üåü Key Features
            
            - üîó **Multi-Connection Management** - Support for multiple InfluxDB instances
            - üóÑÔ∏è **Database Operations** - Complete database CRUD operations
            - üìù **Advanced Query Editor** - Monaco editor with syntax highlighting and auto-completion
            - üìä **Data Visualization** - Multiple chart types with real-time data monitoring
            - üì§üì• **Data Import/Export** - Support for multiple data formats
            - ‚öôÔ∏è **System Monitoring** - Performance metrics and health monitoring
            
            ### üìö Documentation
            
            - [User Manual](https://github.com/your-username/influx-gui/blob/main/user-docs/README.md)
            - [Quick Start Guide](https://github.com/your-username/influx-gui/blob/main/user-docs/quick-start.md)
            - [Feature Overview](https://github.com/your-username/influx-gui/blob/main/user-docs/features/README.md)
            
            ---
            
            For issues and feedback, please visit [GitHub Issues](https://github.com/your-username/influx-gui/issues)
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}
