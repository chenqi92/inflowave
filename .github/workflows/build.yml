name: Build and Release (Single Mode)

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin --target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev \
            pkg-config libglib2.0-dev libgdk-pixbuf2.0-dev libpango1.0-dev libatk1.0-dev libgtk-3-dev \
            libxdo-dev libxdo3

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'ubuntu-22.04' && 'x86_64-unknown-linux-gnu' || '' }}

      - name: Install additional Rust targets
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            rustup target add aarch64-apple-darwin
            rustup target add x86_64-apple-darwin
          elif [ "${{ matrix.platform }}" = "ubuntu-22.04" ]; then
            rustup target add x86_64-unknown-linux-gnu
          fi

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_EMBEDDED_SERVER: false
          # 跨编译环境变量
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ matrix.platform == 'ubuntu-22.04' && '/usr/lib/pkgconfig:/usr/share/pkgconfig' || '' }}
          # 修复 macOS universal build 问题
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.platform == 'macos-latest' && '10.13' || '' }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'InfloWave v__VERSION__'
          releaseBody: |
            InfloWave v__VERSION__

            A modern time-series database management tool:
            - Frontend and backend communicate via IPC
            - Optimal performance and security
            - Cross-platform support
            - Modern UI with shadcn/ui components

            See the assets below to download and install this version.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  build-dev:
    name: Build Development Version
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check
        continue-on-error: true

      - name: Test port conflict resolution
        run: |
          echo "Testing port conflict handling..."
          node -e "
            const net = require('net');
            const server = net.createServer();
            server.listen(1422, () => {
              console.log('✅ Occupied port 1422 for testing');
              const { spawn } = require('child_process');
              const child = spawn('node', ['scripts/start-with-port-check.cjs'], {
                stdio: 'pipe',
                timeout: 10000
              });
              
              let output = '';
              child.stdout.on('data', (data) => {
                output += data.toString();
                console.log(data.toString().trim());
              });
              
              setTimeout(() => {
                child.kill('SIGTERM');
                server.close();
                
                if (output.includes('被占用') && output.includes('找到可用端口')) {
                  console.log('✅ Port conflict resolution test passed');
                  process.exit(0);
                } else {
                  console.log('❌ Port conflict resolution test failed');
                  process.exit(1);
                }
              }, 8000);
            });
          "

      - name: Build test
        run: npm run tauri:build
        env:
          ENABLE_EMBEDDED_SERVER: false