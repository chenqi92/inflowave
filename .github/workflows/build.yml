name: Build and Release (Single Mode)

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # 准备发布说明 (仅在标签推送或手动触发时运行)
  prepare-release-notes:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      release_body: ${{ steps.generate.outputs.release_body }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      
      - name: Generate release notes
        id: generate
        run: |
          # 使用外部脚本生成开发版本的release notes
          RELEASE_BODY=$(node scripts/generate-release-notes.cjs --dev)
          
          # 输出到GitHub Actions
          {
            echo 'release_body<<EOF'
            echo "$RELEASE_BODY"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
        shell: bash

  build:
    if: github.event_name != 'pull_request'
    needs: [prepare-release-notes]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            target: 'i686-pc-windows-msvc'
            args: '--target i686-pc-windows-msvc'
          
          # macOS
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'
          
          # Linux
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'ubuntu-22.04'
            target: 'aarch64-unknown-linux-gnu'
            args: '--target aarch64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev \
            pkg-config libglib2.0-dev libgdk-pixbuf2.0-dev libpango1.0-dev libatk1.0-dev libgtk-3-dev \
            libxdo-dev libxdo3 libssl-dev
          
          # Install ARM64 cross-compilation toolchain and libraries for aarch64 builds
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            # Add ARM64 architecture
            sudo dpkg --add-architecture arm64
            sudo apt-get update
            
            # Install ARM64 cross-compilation toolchain
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            
            # Install ARM64 development libraries
            sudo apt-get install -y \
              libwebkit2gtk-4.1-dev:arm64 \
              libgtk-3-dev:arm64 \
              libayatana-appindicator3-dev:arm64 \
              librsvg2-dev:arm64 \
              libglib2.0-dev:arm64 \
              libgdk-pixbuf2.0-dev:arm64 \
              libpango1.0-dev:arm64 \
              libatk1.0-dev:arm64 \
              libssl-dev:arm64 \
              pkg-config:arm64 || true
            
            # Set up pkg-config for cross-compilation
            export PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
            export PKG_CONFIG_LIBDIR="/usr/lib/aarch64-linux-gnu/pkgconfig"
            export PKG_CONFIG_SYSROOT_DIR="/"
          fi
        shell: bash

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install additional Rust targets
        run: |
          # Target already specified in rust-toolchain step, but ensure it's installed
          rustup target add ${{ matrix.target }}
        shell: bash

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Download fonts for offline use
        run: |
          echo "📦 下载字体文件用于离线使用..."
          node scripts/download-fonts-ci.js
          echo "✅ 字体下载完成"

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_EMBEDDED_SERVER: false
          DISABLE_CONSOLE_LOGS: true
          # 强制设置语言环境为中文，避免生成 en-US 后缀
          LANG: zh_CN.UTF-8
          LC_ALL: zh_CN.UTF-8
          # 跨编译环境变量
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig' || '/usr/lib/pkgconfig:/usr/share/pkgconfig' }}
          PKG_CONFIG_LIBDIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
          PKG_CONFIG_SYSROOT_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/' || '' }}
          # 修复 macOS universal build 问题
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.platform == 'macos-latest' && '10.13' || '' }}
          # ARM64 交叉编译环境变量
          CC_aarch64_unknown_linux_gnu: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
          CXX_aarch64_unknown_linux_gnu: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-g++' || '' }}
          AR_aarch64_unknown_linux_gnu: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-ar' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
          # OpenSSL 交叉编译配置
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/include' || '' }}
          # AppImage 优化配置
          APPIMAGE_EXTRACT_AND_RUN: 1
        with:
          tagName: ${{ github.ref_type == 'tag' && github.ref_name || format('v{0}', steps.package-version.outputs.version) }}
          releaseName: InfloWave ${{ github.ref_type == 'tag' && github.ref_name || format('v{0}', steps.package-version.outputs.version) }}
          releaseBody: ${{ needs.prepare-release-notes.outputs.release_body }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  build-dev:
    name: Build Development Version
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Download fonts for offline use (dev)
        run: |
          echo "📦 下载字体文件用于离线使用 (开发构建)..."
          node scripts/download-fonts-ci.js
          echo "✅ 字体下载完成"

      - name: Run type check
        run: npm run type-check
        continue-on-error: true

      - name: Test port conflict resolution
        run: |
          echo "Testing port conflict handling..."
          node -e "
            const net = require('net');
            const server = net.createServer();
            server.listen(1422, () => {
              console.log('✅ Occupied port 1422 for testing');
              const { spawn } = require('child_process');
              const child = spawn('node', ['scripts/start-with-port-check.cjs'], {
                stdio: 'pipe',
                timeout: 10000
              });
              
              let output = '';
              child.stdout.on('data', (data) => {
                output += data.toString();
                console.log(data.toString().trim());
              });
              
              setTimeout(() => {
                child.kill('SIGTERM');
                server.close();
                
                if (output.includes('被占用') && output.includes('找到可用端口')) {
                  console.log('✅ Port conflict resolution test passed');
                  process.exit(0);
                } else {
                  console.log('❌ Port conflict resolution test failed');
                  process.exit(1);
                }
              }, 8000);
            });
          "
        shell: bash

      - name: Build test
        run: npm run tauri:build:production
        env:
          ENABLE_EMBEDDED_SERVER: false