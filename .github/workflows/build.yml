name: Build and Release (Single Mode)

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      enable_embedded_server:
        description: 'Enable embedded server mode'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Determine build mode
        id: build_mode
        run: |
          if [ "${{ github.event.inputs.enable_embedded_server }}" = "true" ] || [ "${{ contains(github.ref, 'server') }}" = "true" ]; then
            echo "mode=server" >> $GITHUB_OUTPUT
            echo "command=tauri:build:server" >> $GITHUB_OUTPUT
            echo "suffix=-server" >> $GITHUB_OUTPUT
          else
            echo "mode=standard" >> $GITHUB_OUTPUT
            echo "command=tauri:build" >> $GITHUB_OUTPUT
            echo "suffix=" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build the app (Standard Mode)
        if: steps.build_mode.outputs.mode == 'standard'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_EMBEDDED_SERVER: false
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'InfloWave v__VERSION__'
          releaseBody: |
            InfloWave v__VERSION__ - Standard Mode
            
            This version uses pure Tauri mode:
            - Frontend and backend communicate via IPC
            - No HTTP ports required
            - Optimal performance and security
            - Smaller package size
            
            **Port Conflict Resolution**: ✅ Automatic (No HTTP ports used)
            
            See the assets below to download and install this version.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Build the app (Server Mode)
        if: steps.build_mode.outputs.mode == 'server'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_EMBEDDED_SERVER: true
        with:
          tagName: ${{ github.ref_name }}${{ steps.build_mode.outputs.suffix }}
          releaseName: 'InfloWave v__VERSION__ (Server Mode)'
          releaseBody: |
            InfloWave v__VERSION__ - Server Mode
            
            This version includes embedded HTTP server:
            - Built-in HTTP API support
            - CORS proxy functionality  
            - Debug endpoints
            - WebSocket support
            
            **Port Conflict Resolution**: ✅ Automatic (Smart port allocation: 1422-1500)
            
            **Features**:
            - 🚀 Smart port management
            - 🔄 Automatic conflict resolution
            - 📊 Real-time server status
            - 🛠️ Debug tools included
            
            See the assets below to download and install this version.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  build-dev:
    name: Build Development Version
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check
        continue-on-error: true

      - name: Test port conflict resolution
        run: |
          echo "Testing port conflict handling..."
          node -e "
            const net = require('net');
            const server = net.createServer();
            server.listen(1422, () => {
              console.log('✅ Occupied port 1422 for testing');
              const { spawn } = require('child_process');
              const child = spawn('node', ['scripts/start-with-port-check.cjs'], {
                stdio: 'pipe',
                timeout: 10000
              });
              
              let output = '';
              child.stdout.on('data', (data) => {
                output += data.toString();
                console.log(data.toString().trim());
              });
              
              setTimeout(() => {
                child.kill('SIGTERM');
                server.close();
                
                if (output.includes('被占用') && output.includes('找到可用端口')) {
                  console.log('✅ Port conflict resolution test passed');
                  process.exit(0);
                } else {
                  console.log('❌ Port conflict resolution test failed');
                  process.exit(1);
                }
              }, 8000);
            });
          "

      - name: Build test (Standard Mode)
        run: npm run tauri:build
        env:
          ENABLE_EMBEDDED_SERVER: false

      - name: Build test (Server Mode)  
        run: npm run tauri:build:server
        env:
          ENABLE_EMBEDDED_SERVER: true