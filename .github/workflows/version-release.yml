name: Version-based Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # ÁâàÊú¨Ê£ÄÊµãÂ∑•‰Ωú
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      tag_exists: ${{ steps.check.outputs.tag_exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version should trigger release
        id: check
        shell: bash
        run: |
          # Ëé∑ÂèñÂΩìÂâçÁâàÊú¨
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          if [ "${{ github.event_name }}" = "push" ]; then
            # Á°ÆËÆ§ÊòØ package.json ÂèòÊõ¥Ëß¶Âèë
            if git diff --name-only HEAD~1 HEAD | grep -q "^package\.json$"; then
              echo "üìù package.json was modified in this commit"

              PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin','utf8')).version" || echo "0.0.0")
              echo "Previous version: $PREV_VERSION"
              echo "Current version:  $VERSION"

              if [ "$VERSION" != "$PREV_VERSION" ]; then
                echo "‚úÖ Version changed from $PREV_VERSION to $VERSION"
                if git tag -l | grep -q "^v$VERSION$"; then
                  echo "tag_exists=true" >> "$GITHUB_OUTPUT"
                  echo "should_release=false" >> "$GITHUB_OUTPUT"
                  echo "‚ö†Ô∏è Tag v$VERSION already exists, skipping release"
                else
                  echo "tag_exists=false" >> "$GITHUB_OUTPUT"
                  echo "should_release=true" >> "$GITHUB_OUTPUT"
                  echo "üöÄ Will create release for v$VERSION"
                fi
              else
                echo "should_release=false" >> "$GITHUB_OUTPUT"
                echo "‚è≠Ô∏è Version unchanged, skipping release"
              fi
            else
              echo "should_release=false" >> "$GITHUB_OUTPUT"
              echo "‚è≠Ô∏è package.json not modified, skipping release"
            fi
          else
            # ÊâãÂä®Ëß¶Âèë
            if git tag -l | grep -q "^v$VERSION$"; then
              echo "tag_exists=true" >> "$GITHUB_OUTPUT"
              echo "should_release=false" >> "$GITHUB_OUTPUT"
              echo "‚ö†Ô∏è Tag v$VERSION already exists, skipping release"
            else
              echo "tag_exists=false" >> "$GITHUB_OUTPUT"
              echo "should_release=true" >> "$GITHUB_OUTPUT"
              echo "‚úÖ Manual trigger: will create release for v$VERSION"
            fi
          fi

  # ÂáÜÂ§áÂèëÂ∏ÉËØ¥Êòé
  prepare-release-notes:
    runs-on: ubuntu-latest
    if: needs.detect-version.outputs.should_release == 'true'
    needs: detect-version
    outputs:
      release_body: ${{ steps.generate.outputs.release_body }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Generate release notes
        id: generate
        shell: bash
        run: |
          RELEASE_BODY=$(node scripts/generate-release-notes.cjs)
          {
            echo 'release_body<<EOF'
            echo "$RELEASE_BODY"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

  # ÂÖ®Âπ≥Âè∞ÂÖ®Êû∂ÊûÑÊûÑÂª∫
  build-release:
    needs: [ detect-version, prepare-release-notes ]
    if: needs.detect-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            rust_target: x86_64-pc-windows-msvc
          - platform: windows-latest
            target: i686-pc-windows-msvc
            arch: x86
            rust_target: i686-pc-windows-msvc

          # macOS
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x64
            rust_target: x86_64-apple-darwin
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            rust_target: aarch64-apple-darwin

          # Linux
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            arch: x64
            rust_target: x86_64-unknown-linux-gnu
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            arch: arm64
            rust_target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get update

          # Âü∫Á°Ä‰æùËµñÔºàÂèÇËÄÉ Tauri v2Ôºâ
          sudo apt-get install -y --no-install-recommends \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            build-essential \
            curl wget file \
            pkg-config \
            libssl-dev \
            libxdo-dev \
            patchelf \
            libglib2.0-dev

          echo "üîç Ê£ÄÊü• glib pkg-config..."
          find /usr -name "glib-2.0.pc" 2>/dev/null | head -5 || true
          pkg-config --exists glib-2.0 && pkg-config --modversion glib-2.0 || echo "‚ö†Ô∏è glib-2.0 not found by pkg-config"

          # ARM64 ‰∫§ÂèâÁºñËØë
          if [[ "${{ matrix.rust_target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "üîß ÈÖçÁΩÆ ARM64 ‰∫§ÂèâÁºñËØëÂ§öÊû∂ÊûÑÊ∫ê..."
            sudo dpkg --add-architecture arm64

            # ËøΩÂä†Â§öÊû∂ÊûÑÊ∫êÔºåÈÅøÂÖçË¶ÜÁõñÁ≥ªÁªüÈªòËÆ§Ê∫ê
            sudo tee /etc/apt/sources.list.d/multiarch-arm64.list >/dev/null <<'EOF'
# amd64
  deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
  deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
  deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
  # arm64
  deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
  deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
  deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
  EOF
  
  sudo apt-get update || true
  sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
  
  # Â∞ùËØïÂÆâË£Ö ARM64 dev Â∫ìÔºõÂ§±Ë¥•‰∏çÁªàÊ≠¢
  sudo apt-get install -y --no-install-recommends \
  libwebkit2gtk-4.1-dev:arm64 \
  libgtk-3-dev:arm64 \
  libglib2.0-dev:arm64 \
  libgdk-pixbuf2.0-dev:arm64 \
  libpango1.0-dev:arm64 \
  libatk1.0-dev:arm64 \
  libssl-dev:arm64 \
  libayatana-appindicator3-dev:arm64 \
  librsvg2-dev:arm64 || echo "‚ö†Ô∏è ÈÉ®ÂàÜ ARM64 dev ÂåÖÂÆâË£ÖÂ§±Ë¥•ÔºåÁªßÁª≠ÊûÑÂª∫"
  fi

- name: Setup Rust
  uses: dtolnay/rust-toolchain@stable
  with:
    targets: ${{ matrix.rust_target }}

- name: Setup additional macOS targets
  if: matrix.platform == 'macos-latest'
  shell: bash
  run: |
    rustup target add aarch64-apple-darwin
    rustup target add x86_64-apple-darwin

- name: Rust cache
  uses: swatinem/rust-cache@v2
  with:
    workspaces: ./src-tauri -> target

- name: Setup Node.js
  uses: actions/setup-node@v4
  with:
    node-version: 'lts/*'
    cache: npm

- name: Install frontend dependencies
  run: npm ci

- name: Download fonts for offline use
  shell: bash
  run: |
    echo "üì¶ ‰∏ãËΩΩÂ≠ó‰ΩìÊñá‰ª∂Áî®‰∫éÁ¶ªÁ∫ø‰ΩøÁî®..."
    node scripts/download-fonts-ci.cjs
    echo "‚úÖ Â≠ó‰Ωì‰∏ãËΩΩÂÆåÊàê"

- name: Build Standard Mode
  uses: tauri-apps/tauri-action@v0
  env:
    GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
    ENABLE_EMBEDDED_SERVER: false
    DISABLE_CONSOLE_LOGS: true

    LANG: zh_CN.UTF-8
    LC_ALL: zh_CN.UTF-8

    # Ë∑®ÁºñËØë
    PKG_CONFIG_ALLOW_CROSS: 1
    PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
    PKG_CONFIG_PATH: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig' || '/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig' }}
    PKG_CONFIG_LIBDIR: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '' }}
    PKG_CONFIG_SYSROOT_DIR: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && '/' || '' }}

    # ‰∏é tauri ÈÖçÁΩÆ‰∏ÄËá¥
    MACOSX_DEPLOYMENT_TARGET: ${{ matrix.platform == 'macos-latest' && '10.15' || '' }}

    # ARM64 Â∑•ÂÖ∑Èìæ
    CC_aarch64_unknown_linux_gnu: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
    CXX_aarch64_unknown_linux_gnu: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-g++' || '' }}
    AR_aarch64_unknown_linux_gnu: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-ar' || '' }}
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}

    # OpenSSLÔºàÂ¶Ç‰ΩøÁî®Ôºâ
    OPENSSL_DIR: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
    OPENSSL_LIB_DIR: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
    OPENSSL_INCLUDE_DIR: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && '/usr/include' || '' }}

    # glib Á≥ªÂàó
    GLIB_SYS_USE_PKG_CONFIG: 1
    GOBJECT_SYS_USE_PKG_CONFIG: 1
    GIO_SYS_USE_PKG_CONFIG: 1

    # AppImage ‰ºòÂåñ
    APPIMAGE_EXTRACT_AND_RUN: 1
  with:
    tagName: v${{ needs.detect-version.outputs.version }}
    releaseName: 'InfloWave v${{ needs.detect-version.outputs.version }}'
    releaseBody: ${{ needs.prepare-release-notes.outputs.release_body }}
    releaseDraft: false
    prerelease: false
    args: --target ${{ matrix.rust_target }}
