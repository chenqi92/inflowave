name: Version-based Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # 版本检测工作
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      tag_exists: ${{ steps.check.outputs.tag_exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version should trigger release
        id: check
        run: |
          # 获取当前版本
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # 检查是否是package.json变更触发的
          if [ "${{ github.event_name }}" = "push" ]; then
            # 检查package.json是否在本次提交中被修改
            if git diff --name-only HEAD~1 HEAD | grep -q "package.json"; then
              echo "📝 package.json was modified in this commit"
              
              # 检查版本号是否真的变更了
              PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" || echo "0.0.0")
              echo "Previous version: $PREV_VERSION"
              echo "Current version: $VERSION"
              
              if [ "$VERSION" != "$PREV_VERSION" ]; then
                echo "✅ Version changed from $PREV_VERSION to $VERSION"
                
                # 检查标签是否存在
                if git tag -l | grep -q "^v$VERSION$"; then
                  echo "tag_exists=true" >> $GITHUB_OUTPUT
                  echo "should_release=false" >> $GITHUB_OUTPUT
                  echo "⚠️ Tag v$VERSION already exists, skipping release"
                else
                  echo "tag_exists=false" >> $GITHUB_OUTPUT
                  echo "should_release=true" >> $GITHUB_OUTPUT
                  echo "🚀 Will create release for v$VERSION"
                fi
              else
                echo "should_release=false" >> $GITHUB_OUTPUT
                echo "⏭️ Version unchanged, skipping release"
              fi
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "⏭️ package.json not modified, skipping release"
            fi
          else
            # 手动触发的情况
            if git tag -l | grep -q "^v$VERSION$"; then
              echo "tag_exists=true" >> $GITHUB_OUTPUT
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "⚠️ Tag v$VERSION already exists, skipping release"
            else
              echo "tag_exists=false" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "✅ Manual trigger: will create release for v$VERSION"
            fi
          fi
        shell: bash

  # 准备发布说明
  prepare-release-notes:
    runs-on: ubuntu-latest
    if: needs.detect-version.outputs.should_release == 'true'
    needs: detect-version
    outputs:
      release_body: ${{ steps.generate.outputs.release_body }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      
      - name: Generate release notes
        id: generate
        run: |
          # 使用外部脚本生成release notes
          RELEASE_BODY=$(node scripts/generate-release-notes.cjs)
          
          # 输出到GitHub Actions
          {
            echo 'release_body<<EOF'
            echo "$RELEASE_BODY"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
        shell: bash

  # 全平台全架构构建
  build-release:
    needs: [detect-version, prepare-release-notes]
    if: needs.detect-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            rust_target: 'x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            target: 'i686-pc-windows-msvc'
            arch: 'x86'
            rust_target: 'i686-pc-windows-msvc'
          
          # macOS - 移除不支持的 universal-apple-darwin
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            rust_target: 'x86_64-apple-darwin'
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
            rust_target: 'aarch64-apple-darwin'
          
          # Linux - 支持 x64 和 ARM64 架构
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            rust_target: 'x86_64-unknown-linux-gnu'
          - platform: 'ubuntu-22.04'
            target: 'aarch64-unknown-linux-gnu'
            arch: 'arm64'
            rust_target: 'aarch64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev \
            pkg-config libglib2.0-dev libgdk-pixbuf2.0-dev libpango1.0-dev libatk1.0-dev \
            libxdo-dev libxdo3
          
          # Install ARM64 cross-compilation toolchain for aarch64 builds
          if [[ "${{ matrix.rust_target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi
        shell: bash



      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Setup additional macOS targets
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Standard Mode
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          ENABLE_EMBEDDED_SERVER: false
          DISABLE_CONSOLE_LOGS: true
          # 跨编译环境变量
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ matrix.platform == 'ubuntu-22.04' && '/usr/lib/pkgconfig:/usr/share/pkgconfig' || '' }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.platform == 'macos-latest' && '10.13' || '' }}
          # ARM64 交叉编译环境变量
          CC_aarch64_unknown_linux_gnu: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
          CXX_aarch64_unknown_linux_gnu: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-g++' || '' }}
          AR_aarch64_unknown_linux_gnu: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-ar' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.rust_target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
        with:
          tagName: v${{ needs.detect-version.outputs.version }}
          releaseName: 'InfloWave v${{ needs.detect-version.outputs.version }}'
          releaseBody: ${{ needs.prepare-release-notes.outputs.release_body }}
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.rust_target }}

