name: Version-based Release

on:
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  # 版本检测工作
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      tag_exists: ${{ steps.check.outputs.tag_exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version should trigger release
        id: check
        run: |
          # 获取当前版本
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # 检查是否是package.json变更触发的
          if [ "${{ github.event_name }}" = "push" ]; then
            # 检查package.json是否在本次提交中被修改
            if git diff --name-only HEAD~1 HEAD | grep -q "package.json"; then
              echo "📝 package.json was modified in this commit"
              
              # 检查版本号是否真的变更了
              PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" || echo "0.0.0")
              echo "Previous version: $PREV_VERSION"
              echo "Current version: $VERSION"
              
              if [ "$VERSION" != "$PREV_VERSION" ]; then
                echo "✅ Version changed from $PREV_VERSION to $VERSION"
                
                # 检查标签是否存在
                if git tag -l | grep -q "^v$VERSION$"; then
                  echo "tag_exists=true" >> $GITHUB_OUTPUT
                  echo "should_release=false" >> $GITHUB_OUTPUT
                  echo "⚠️ Tag v$VERSION already exists, skipping release"
                else
                  echo "tag_exists=false" >> $GITHUB_OUTPUT
                  echo "should_release=true" >> $GITHUB_OUTPUT
                  echo "🚀 Will create release for v$VERSION"
                fi
              else
                echo "should_release=false" >> $GITHUB_OUTPUT
                echo "⏭️ Version unchanged, skipping release"
              fi
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "⏭️ package.json not modified, skipping release"
            fi
          else
            # 手动触发的情况
            if git tag -l | grep -q "^v$VERSION$"; then
              echo "tag_exists=true" >> $GITHUB_OUTPUT
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "⚠️ Tag v$VERSION already exists, skipping release"
            else
              echo "tag_exists=false" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "✅ Manual trigger: will create release for v$VERSION"
            fi
          fi

  # 全平台全架构构建
  build-release:
    needs: detect-version
    if: needs.detect-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            rust_target: 'x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            target: 'i686-pc-windows-msvc'
            arch: 'x86'
            rust_target: 'i686-pc-windows-msvc'
          
          # macOS - 移除不支持的 universal-apple-darwin
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            rust_target: 'x86_64-apple-darwin'
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
            rust_target: 'aarch64-apple-darwin'
          
          # Linux - 仅支持 x64 架构以确保构建稳定性
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            rust_target: 'x86_64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev \
            pkg-config libglib2.0-dev libgdk-pixbuf2.0-dev libpango1.0-dev libatk1.0-dev \
            libxdo-dev libxdo3



      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Setup additional macOS targets
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Standard Mode
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_EMBEDDED_SERVER: false
          # 跨编译环境变量
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ matrix.platform == 'ubuntu-22.04' && '/usr/lib/pkgconfig:/usr/share/pkgconfig' || '' }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.platform == 'macos-latest' && '10.13' || '' }}
        with:
          tagName: v${{ needs.detect-version.outputs.version }}
          releaseName: 'InfloWave v${{ needs.detect-version.outputs.version }}'
          releaseBody: |
            ## 🚀 InfloWave v${{ needs.detect-version.outputs.version }}
            
            现代化的时序数据库管理工具，提供直观的用户界面和强大的数据分析功能。
            
            ### ✨ 主要特性
            - 🔒 **安全稳定** - 采用 IPC 通信，无端口冲突风险
            - ⚡ **性能优异** - 原生通信机制，响应速度更快
            - 🛡️ **隐私保护** - 不暴露网络端口，数据更安全
            - 📦 **体积精简** - 最小化依赖，安装包更小
            
            ### 💻 支持平台
            
            #### Windows 用户
            📥 **[InfloWave_v${{ needs.detect-version.outputs.version }}_x64.msi](https://github.com/${{ github.repository }}/releases/download/v${{ needs.detect-version.outputs.version }}/InfloWave_v${{ needs.detect-version.outputs.version }}_x64.msi)**  
            - 适用于 Windows 10/11 (64位系统)  
            - 推荐给大部分用户  
            
            📥 **[InfloWave_v${{ needs.detect-version.outputs.version }}_x86.msi](https://github.com/${{ github.repository }}/releases/download/v${{ needs.detect-version.outputs.version }}/InfloWave_v${{ needs.detect-version.outputs.version }}_x86.msi)**  
            - 适用于较老的32位 Windows 系统  
            
            #### macOS 用户
            🍎 **Apple Silicon Mac (M1/M2/M3芯片)**  
            📥 **[InfloWave_${{ needs.detect-version.outputs.version }}_aarch64.dmg](https://github.com/${{ github.repository }}/releases/download/v${{ needs.detect-version.outputs.version }}/InfloWave_${{ needs.detect-version.outputs.version }}_aarch64.dmg)**  
            - 适用于2020年后发布的 Mac (苹果芯片)  
            - 性能最优，原生支持  
            - ⚠️ **无法在 Intel Mac 上运行**  
            
            💻 **Intel Mac**  
            📥 **[InfloWave_${{ needs.detect-version.outputs.version }}_x64.dmg](https://github.com/${{ github.repository }}/releases/download/v${{ needs.detect-version.outputs.version }}/InfloWave_${{ needs.detect-version.outputs.version }}_x64.dmg)**  
            - 适用于2020年前的 Intel 处理器 Mac  
            - 不支持 Apple Silicon 芯片  
            
            #### Linux 用户
            📦 **Debian/Ubuntu 系列**  
            📥 **[inflowav_${{ needs.detect-version.outputs.version }}_amd64.deb](https://github.com/${{ github.repository }}/releases/download/v${{ needs.detect-version.outputs.version }}/inflowav_${{ needs.detect-version.outputs.version }}_amd64.deb)**  
            - 使用 `sudo dpkg -i` 命令安装  
            
            🗂️ **通用 Linux**  
            📥 **[InfloWave_${{ needs.detect-version.outputs.version }}_amd64.AppImage](https://github.com/${{ github.repository }}/releases/download/v${{ needs.detect-version.outputs.version }}/InfloWave_${{ needs.detect-version.outputs.version }}_amd64.AppImage)**  
            - 免安装，下载后直接运行  
            - 适用于大部分 x64 Linux 发行版  
            
            ### 📝 安装说明
            1. **Windows**: 下载 .msi 文件后双击安装
            2. **macOS**: 下载 .dmg 文件，双击打开后拖入 Applications 文件夹
            3. **Linux**: 下载 .deb 或 .AppImage 文件，按照上述说明操作
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.rust_target }}

