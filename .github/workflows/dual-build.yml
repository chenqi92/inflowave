name: Dual Mode Build

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-standard:
    name: Build Standard Mode
    strategy:
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin --target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev \
            pkg-config libglib2.0-dev libgdk-pixbuf2.0-dev libpango1.0-dev libatk1.0-dev libgtk-3-dev \
            libxdo-dev libxdo3

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'ubuntu-22.04' && 'x86_64-unknown-linux-gnu' || '' }}

      - name: Install additional Rust targets
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            rustup target add aarch64-apple-darwin
            rustup target add x86_64-apple-darwin
          elif [ "${{ matrix.platform }}" = "ubuntu-22.04" ]; then
            rustup target add x86_64-unknown-linux-gnu
          fi

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - run: npm ci

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_EMBEDDED_SERVER: false
          # 跨编译环境变量
          PKG_CONFIG_ALLOW_CROSS: 1
          PKG_CONFIG_PATH: ${{ matrix.platform == 'ubuntu-22.04' && '/usr/lib/pkgconfig:/usr/share/pkgconfig' || '' }}
          # 修复 macOS universal build 问题
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.platform == 'macos-latest' && '10.13' || '' }}
        with:
          tagName: ${{ inputs.tag_name }}
          releaseName: 'InfloWave ${{ inputs.tag_name }} (Standard)'
          releaseBody: |
            ## 🚀 InfloWave v__VERSION__
            
            现代化的时序数据库管理工具，提供直观的用户界面和强大的数据分析功能。
            
            ### ✨ 主要特性
            - 🔒 **安全稳定** - 采用 IPC 通信，无端口冲突风险
            - ⚡ **性能优异** - 原生通信机制，响应速度更快
            - 🛡️ **隐私保护** - 不暴露网络端口，数据更安全
            - 📦 **体积精简** - 最小化依赖，安装包更小
            
            ### 💻 支持平台
            
            #### Windows 用户
            📥 **推荐下载 .msi 安装包**  
            - 适用于 Windows 10/11 (64位系统推荐)  
            - 双击安装，简单快捷  
            
            #### macOS 用户
            🍎 **Apple Silicon Mac (M1/M2/M3芯片)**  
            📥 **选择 aarch64 版本**  
            - 适用于2020年后发布的 Mac (苹果芯片)  
            - ⚠️ **无法在 Intel Mac 上运行**  
            
            💻 **Intel Mac**  
            📥 **选择 x64 版本**  
            - 适用于2020年前的 Intel 处理器 Mac  
            
            #### Linux 用户
            📦 **Debian/Ubuntu**: 选择 .deb 安装包  
            🗂️ **其他发行版**: 选择 .AppImage 免安装版本  
            
            ### 📝 安装说明
            1. **Windows**: 下载 .msi 文件后双击安装
            2. **macOS**: 下载 .tar.gz 文件，解压后拖入 Applications 文件夹
            3. **Linux**: 下载 .deb 或 .AppImage 文件进行安装或运行
          releaseDraft: ${{ inputs.create_release }}
          prerelease: false
          includeRelease: ${{ inputs.create_release }}
          args: ${{ matrix.args }}

