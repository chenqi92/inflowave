/**
 * Êó•ÂøóÂ∑•ÂÖ∑Á±ª
 * Êèê‰æõÂàÜÁ∫ßÊó•ÂøóÂäüËÉΩÔºåÊîØÊåÅÁéØÂ¢ÉÂèòÈáèÊéßÂà∂
 */

export enum LogLevel {
  ERROR = 0,
  WARN = 1,
  INFO = 2,
  DEBUG = 3,
}

interface LoggerConfig {
  level: LogLevel;
  enableEmoji: boolean;
  enableTimestamp: boolean;
  enableStackTrace: boolean;
}

class Logger {
  private config: LoggerConfig;

  constructor() {
    // üîß Ê†πÊçÆÁéØÂ¢ÉÂèòÈáèËÆæÁΩÆÊó•ÂøóÁ∫ßÂà´
    const isDev = import.meta.env.DEV;
    const logLevelEnv = import.meta.env.VITE_LOG_LEVEL;

    let level = LogLevel.ERROR; // Áîü‰∫ßÁéØÂ¢ÉÈªòËÆ§Âè™ÊòæÁ§∫ÈîôËØØ

    if (isDev) {
      // ÂºÄÂèëÁéØÂ¢ÉÈªòËÆ§ÊòæÁ§∫ INFO Á∫ßÂà´
      level = LogLevel.INFO;
    }

    // ÂÖÅËÆ∏ÈÄöËøáÁéØÂ¢ÉÂèòÈáèË¶ÜÁõñ
    if (logLevelEnv) {
      switch (logLevelEnv.toUpperCase()) {
        case 'ERROR':
          level = LogLevel.ERROR;
          break;
        case 'WARN':
          level = LogLevel.WARN;
          break;
        case 'INFO':
          level = LogLevel.INFO;
          break;
        case 'DEBUG':
          level = LogLevel.DEBUG;
          break;
      }
    }

    this.config = {
      level,
      enableEmoji: isDev,
      enableTimestamp: false, // ÊµèËßàÂô®ÊéßÂà∂Âè∞Â∑≤ÊúâÊó∂Èó¥Êà≥
      enableStackTrace: false,
    };
  }

  /**
   * ËÆæÁΩÆÊó•ÂøóÁ∫ßÂà´
   */
  setLevel(level: LogLevel) {
    this.config.level = level;
  }

  /**
   * Ëé∑ÂèñÂΩìÂâçÊó•ÂøóÁ∫ßÂà´
   */
  getLevel(): LogLevel {
    return this.config.level;
  }

  /**
   * Ê†ºÂºèÂåñÊó•ÂøóÊ∂àÊÅØ
   */
  private format(level: string, emoji: string, message: string, ...args: any[]): any[] {
    const parts: any[] = [];

    if (this.config.enableEmoji) {
      parts.push(`${emoji} [${level}]`);
    } else {
      parts.push(`[${level}]`);
    }

    parts.push(message);
    parts.push(...args);

    return parts;
  }

  /**
   * ÈîôËØØÊó•ÂøóÔºàÊÄªÊòØÊòæÁ§∫Ôºâ
   */
  error(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.ERROR) {
      console.error(...this.format('ERROR', '‚ùå', message, ...args));
    }
  }

  /**
   * Ë≠¶ÂëäÊó•Âøó
   */
  warn(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.WARN) {
      console.warn(...this.format('WARN', '‚ö†Ô∏è', message, ...args));
    }
  }

  /**
   * ‰ø°ÊÅØÊó•Âøó
   */
  info(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.INFO) {
      console.log(...this.format('INFO', '‚ÑπÔ∏è', message, ...args));
    }
  }

  /**
   * Ë∞ÉËØïÊó•ÂøóÔºà‰ªÖÂºÄÂèëÁéØÂ¢ÉÔºâ
   */
  debug(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.log(...this.format('DEBUG', 'üîç', message, ...args));
    }
  }

  /**
   * ÊÄßËÉΩÊó•ÂøóÔºàÊ∏≤Êüì„ÄÅÊìç‰ΩúÁ≠âÔºâ
   */
  perf(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.log(...this.format('PERF', '‚ö°', message, ...args));
    }
  }

  /**
   * Ê∏≤ÊüìÊó•ÂøóÔºàÁªÑ‰ª∂Ê∏≤ÊüìÔºâ
   */
  render(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.log(...this.format('RENDER', 'üé®', message, ...args));
    }
  }

  /**
   * Êï∞ÊçÆÊó•ÂøóÔºàÊï∞ÊçÆÂä†ËΩΩ„ÄÅÊõ¥Êñ∞Á≠âÔºâ
   */
  data(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.log(...this.format('DATA', 'üìä', message, ...args));
    }
  }

  /**
   * ÁΩëÁªúÊó•ÂøóÔºàAPI Ë∞ÉÁî®Á≠âÔºâ
   */
  network(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.log(...this.format('NETWORK', 'üåê', message, ...args));
    }
  }

  /**
   * Â≠òÂÇ®Êó•ÂøóÔºàStore Êõ¥Êñ∞Á≠âÔºâ
   */
  store(message: string, ...args: any[]) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.log(...this.format('STORE', 'üìÅ', message, ...args));
    }
  }

  /**
   * ÂàÜÁªÑÊó•ÂøóÂºÄÂßã
   */
  group(label: string) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.group(label);
    }
  }

  /**
   * ÂàÜÁªÑÊó•ÂøóÁªìÊùü
   */
  groupEnd() {
    if (this.config.level >= LogLevel.DEBUG) {
      console.groupEnd();
    }
  }

  /**
   * ËÆ°Êó∂ÂºÄÂßã
   */
  time(label: string) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.time(label);
    }
  }

  /**
   * ËÆ°Êó∂ÁªìÊùü
   */
  timeEnd(label: string) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.timeEnd(label);
    }
  }

  /**
   * Ë°®Ê†ºÊó•Âøó
   */
  table(data: any) {
    if (this.config.level >= LogLevel.DEBUG) {
      console.table(data);
    }
  }
}

// ÂØºÂá∫Âçï‰æã
export const logger = new Logger();

// ÂØºÂá∫‰æøÊç∑ÊñπÊ≥ï
export const log = {
  error: logger.error.bind(logger),
  warn: logger.warn.bind(logger),
  info: logger.info.bind(logger),
  debug: logger.debug.bind(logger),
  perf: logger.perf.bind(logger),
  render: logger.render.bind(logger),
  data: logger.data.bind(logger),
  network: logger.network.bind(logger),
  store: logger.store.bind(logger),
  group: logger.group.bind(logger),
  groupEnd: logger.groupEnd.bind(logger),
  time: logger.time.bind(logger),
  timeEnd: logger.timeEnd.bind(logger),
  table: logger.table.bind(logger),
};

export default logger;

